# vim:se syn=tcl:
#

use cc cc-lib cc-shared pkg-config

set maj_ver 1
set med_ver 11
set min_ver 1
set dev_ver 0
define PKG_API [expr $maj_ver * 1000000 + $med_ver * 1000 + $min_ver]
define VERSION $maj_ver.$med_ver.$min_ver[expr {$dev_ver ? ".$dev_ver" : ""}]

# Add any user options here
options {
	pkgconfigdir:WHERE => "path to the directory where to install pc files"
	with-ldns => "add support for libldns"
}

if {[opt-str pkgconfigdir dir]} {
	define pkgconfigdir $dir
} else {
	define pkgconfigdir [get-define prefix]/lib/pkgconfig
}

cc-check-tools ar ranlib strip

define EXTRA_LIBS ""
define LIBVERSION 4
define LIBSOEXT [format [get-define SH_SOEXTVER] [get-define LIBVERSION]]

define GITHASH ""
if {[cc-check-progs git] && [file exists .git]} {
	catch {exec git rev-parse --short HEAD} gitrev
	catch {exec git diff-index -m --name-only HEAD} gitdirty
	define GITHASH -$gitrev[expr {$gitdirty eq {} ? {} : {-dirty}}]
}

define-feature static

cc-with { -libs { -larchive_pic }} {
	if {![cc-check-functions archive_read_open]} {
		user-error "Unable to find libarchive"
	}
}

cc-with { -libs { -lexpat_pic }} {
	if {![cc-check-functions XML_ParseBuffer]} {
		user-error "Unable to find libexpat_pic"
	}
}

cc-with { -libs { -lzstd_pic }} {
	if {![cc-check-functions ZSTD_versionNumber]} {
		user-error "Unable to find libzstd_pic"
	}
}

cc-with { -libs { -lb2_pic }} {
	if {![cc-check-functions blake2b_init]} {
		user-error "Unable to find libb2_pic"
	}
}

cc-with { -libs { -lpicosat_pic }} {
	if {![cc-check-functions picosat_set_verbosity]} {
		user-error "Unable to find libpicosat_pic"
	}
}

cc-with { -libs { -llinenoise_pic }} {
	if {![cc-check-functions linenoiseClearScreen]} {
		user-error "Unable to find liblinenoise_pic"
	}
}

cc-with { -libs { -lucl_pic }} {
	if {![cc-check-functions ucl_object_string_to_type]} {
		user-error "Unable to find libucl_pic"
	}
}

foreach header [list uthash.h utstring.h] {
	if {![cc-check-includes $header]} {
		user-error "Unable to find uthash headers"
	}
}

# Atomics
msg-checking "Checking for atomic builtins... "
if {[cctest -code {
	volatile unsigned long val = 1;
	__sync_synchronize();
	__sync_val_compare_and_swap(&val, 1, 0);
	__sync_add_and_fetch(&val, 1);
	__sync_sub_and_fetch(&val, 1);
	return 0;
	}
]} {
	msg-result ok
	define-feature atomic_builtins
} else {
	msg-result no
	define-feature atomic_builtins 0
}

msg-checking "Checking for /proc/self/fd support... "
if {[file exists /proc/self/fd]} {
	msg-result ok
	define-feature proc-pid
} else {
	msg-result no
	define-feature proc-pid 0
}

foreach fct [list memmove usleep pread pwrite] {
	if {![cc-check-functions $fct]} {
		user-error "Cannot find $fct"
	}
}

cc-with { -includes fcntl.h } {
	cc-check-decls F_CLOSEM
}

cc-with { -includes sys/socket.h } {
	cc-check-decls SOCK_SEQPACKET
}

cc-with { -includes netinet/in.h } {
	cc-check-members "struct sockaddr_in.sin_len"
}

cc-with { -includes sys/stat.h } {
	cc-check-members "struct stat.st_mtim" "struct stat.st_flags"
}

cc-with { -includes dirent.h } {
	cc-check-members "struct dirent.d_type"
}

# check for sqlite
cc-check-functions gmtime_r isnan localtime_r strchrnul strerror_r
cc-check-includes stdint.h inttypes.h

# check for pkg itself
cc-check-functions arc4random arc4random_stir chflagsat \
	closefrom dirfd eaccess fopencookie fstatfs funopen strnstr \
	strtofflags sysconf utimensat __res_setservers \
	linkat fstatat openat mkdirat symlinkat \
	fflagstostr futimes flock \
	getprogname getexecname program_invocation_short_name

if {![cc-check-functions fts_open]} {
	cc-with { -libs { -lfts }} {
		if {[cc-check-functions fts_open]} {
			define-feature LIBFTS
		}
	}
}

if {![cc-check-functions dlclose]} {
	cc-with { -libs { -ldl }} {
		if {[cc-check-functions dlclose]} {
			define-feature LIBDL
		}
	}
}

if {![cc-check-functions __res_query]} {
	cc-with { -libs { -lresolv }} {
		if {[cc-check-functions __res_query]} {
			define-feature LIBRESOLV
		}
	}
}

cc-check-includes machine/endian.h osreldate.h readpassphrase.h \
	sys/procctl.h sys/statfs.h sys/statvfs.h

# for compat
cc-check-includes paths.h

#endian stuff
foreach header [list endian.h sys/endian.h] {
	if {[cc-check-includes $header]} {
		cc-with [list -includes $header] {
			cc-check-decls be16dec be16enc be32dec be32enc be64dec be64enc \
				le16dec le16enc le32dec le32enc le64dec le64enc
		}
	}
}

if {[string match *-darwin* [get-define host]]} {
	define libabidir libmachista
	define machista libmachista
} else {
# libelf
	define machista ""

	cc-with { -libs { -lelf_pic }} {
		if {[cc-check-functions elf_version]} {
			define-feature libelf
			define libabidir "libelf"
		} else {
			user-error "Unable to find libelf_pic"
		}
	}
	cc-check-includes libelf/libelf.h
}

cc-with { -libs { -ljail} } {
	if {[cc-check-functions jail_getid]} {
		define-feature libjail
		define-append EXTRA_LIBS -ljail
	}
}

# capsicum
if {[cc-check-functions cap_sandboxed]} {
	define-feature capsicum
	cc-check-includes sys/capsicum.h sys/capability.h
}

define testsdir ""
if {[pkg-config-init 0]} {
# atf
	if {[pkg-config atf-c] && [cc-check-progs kyua]} {
		define testsdir tests
		puts "test suite will be built"
	} else {
		puts "Skipping test suite"
	}
	if {[opt-bool with-ldns]} {
		if {![pkg-config libldns]} {
			user-error "Unable to find libldns"
		} else {
			define PKG_LIBDNS_LIBS_STATIC [exec pkg-config --static --libs-only-l libldns]
		}
	}
}

foreach repo [list binary] {
	define-append REPOS $repo
	define-append REPOS_LDFLAGS -L\$(top_builddir)/libpkg/repo/${repo} -lrepo-${repo}_pic
	define-append REPOS_STATIC_LIBS \$(top_builddir)/libpkg/repo/${repo}/librepo-${repo}.a
}

# ccache
if {[get-define CCACHE] ne {none}} {
  define CC "[get-define CCACHE] [get-define CC]"
}

make-config-header pkg_config.h
make-config-header external/sqlite/config.h
make-template mk/defs.mk.in
make-template libpkg/pkg.h.in
make-template libpkg/pkg.pc.in
make-template tests/frontend/test_environment.sh.in
make-template Makefile.autosetup Makefile

foreach dir [list external libpkg libpkg/repo libpkg/repo/binary src \
	external/sqlite external/libmachista tests docs scripts] {
	make-template $dir/Makefile.autosetup $dir/Makefile
}

