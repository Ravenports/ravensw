include @builddir@/mk/defs.mk

TESTS=	\
	checksum \
	deps_formula \
	merge \
	pkg_add_dir_to_del \
	pkg_printf \
	pkg_validation \
	plist

TESTS:=
TESTS2=	checksum

TESTS_SH= \
	frontend/pkg.sh \
	frontend/add.sh \
	frontend/alias.sh \
	frontend/annotate.sh \
	frontend/autoremove.sh \
	frontend/autoupgrade.sh \
	frontend/config.sh \
	frontend/configmerge.sh \
	frontend/conflicts.sh \
	frontend/conflicts-multirepo.sh \
	frontend/create.sh \
	frontend/delete.sh \
	frontend/extract.sh \
	frontend/install.sh \
	frontend/jpeg.sh \
	frontend/lock.sh \
	frontend/messages.sh \
	frontend/multipleprovider.sh \
	frontend/packagesplit.sh \
	frontend/packagemerge.sh \
	frontend/php-pr.sh \
	frontend/pubkey.sh \
	frontend/query.sh \
	frontend/register.sh \
	frontend/repo.sh \
	frontend/requires.sh \
	frontend/rootdir.sh \
	frontend/rubypuppet.sh \
	frontend/search.sh \
	frontend/set.sh \
	frontend/version.sh \
	frontend/vital.sh \
	frontend/update.sh \
	frontend/issue1374.sh \
	frontend/issue1425.sh \
	frontend/issue1440.sh \
	frontend/issue1445.sh \
	frontend/fingerprint.sh

merge_OBJS=	lib/merge.o
plist_OBJS=	lib/plist.o
checksum_OBJS=	lib/checksum.o
pkg_printf_OBJS=	lib/pkg_printf_test.o \
			lib/pkg_printf.o
deps_formula_OBJS=	lib/deps_formula.o
pkg_add_dir_to_del_OBJS=	lib/pkg_add_dir_to_del.o
pkg_validation_OBJS=	lib/pkg_validation.o

SRCS=	\
	$(merge_OBJS:.o=.c) \
	$(plist_OBJS:.o=.c) \
	$(checksum_OBJS:.o=.c) \
	$(pkg_printf_OBJS:.o=.c) \
	$(deps_formula_OBJS:.o=.c) \
	$(pkg_add_dir_to_del_OBJS:.o=.c) \
	$(pkg_validation_OBJS:.o=.c)

SRCS :=	$(checksum_OBJS:.o=.c)

include $(MK)/common.mk

TESTS_SHELL=	$(TESTS_SH:.sh=)

LOCAL_CFLAGS=	-I$(top_srcdir)/external/klib \
		-I$(top_srcdir)/external/sqlite \
		-I$(top_builddir)/ \
		-I$(top_builddir)/libpkg \
		@PKG_ATF_C_CFLAGS@ \
		-DTESTING

LIBRAVENSW=	-L$(top_builddir)/ada_source/libobj -lravensw -Wl,-rpath,$(top_builddir)/ada_source/libobj
LIBPKG_PIC=	-L$(top_builddir)/libpkg -lpkg_pic
LIBREPO_PIC=	-L$(top_builddir)/libpkg/repo/binary -lrepo-binary_pic
SQLITE_PIC=	-L$(top_builddir)/external/sqlite -lsqlite_pic
AVLTREE_PIC=	-L$(top_builddir)/external/avltree -lavltree_pic
OTHER_LIBS=	@EXTRA_LIBS@

LIBS+=		${AVLTREE_PIC}
LIBS+=		${SQLITE_PIC}
LIBS+=		-larchive
LIBS+=		-lexpat_pic
LIBS+=		-lzstd_pic
LIBS+=		-llinenoise_pic
LIBS+=		-lucl_pic
LIBS+=		-lb2_pic
LIBS+=		-lpicosat_pic
LIBS+=		-lfetch_pic
LIBS+=		-lssl_pic
LIBS+=		-lcrypto_pic
OTHER_LIBS+=	-lm -pthread

LIBS2=		${SQLITE_PIC}
LIBS2+=		-llinenoise_pic
LIBS2+=		-lucl_pic
LIBS2+=		-lssl_pic
LIBS2+=		-lcrypto_pic
OTHER_LIBS2+=	-lm -pthread

@if HAVE_LIBFTS
OTHER_LIBS+=	-lfts
OTHER_LIBS2+=	-lfts
@endif
@if HAVE_LIBDL
OTHER_LIBS+=	-ldl
OTHER_LIBS2+=	-ldl
@endif
@if HAVE_LIBRESOLV
OTHER_LIBS+=	-lresolv
OTHER_LIBS2+=	-lresolv
@endif

@if libabidir == libelf
LIBS+=		-lelf_pic
LIBS2+=		-lelf_pic
@endif

@if system_type == solaris
OTHER_LIBS+=	-lsocket -lrt -lgen
OTHER_LIBS2+=	-lsocket -lrt -lgen
@endif

LOCAL_LDFLAGS=	$(LIBPKG_PIC) $(LIBREPO_PIC) $(LIBS) $(OTHER_LIBS)
LOCAL_LDFLAGS+=	@PKG_ATF_C_LDFLAGS@ @PKG_ATF_C_LIBS@
LOCAL_LDFLAGS2= $(LIBRAVENSW) $(LIBS2) $(OTHER_LIBS2)

# all: $(TESTS) Kyuafile ${TESTS_SHELL} frontend/Kyuafile
all: $(TESTS2) Kyuafile2

$(TESTS2): $(OBJS)
	$(CC) -o $@ $($@_OBJS) $(LDFLAGS) $(LOCAL_LDFLAGS2)

$(TESTS): $(OBJS)
	$(CC) -o $@ $($@_OBJS) $(LDFLAGS) $(LOCAL_LDFLAGS)

lib/pkg_printf.c:
	cp $(top_srcdir)/libpkg/pkg_printf.c $@

.sh:
	install -m 755 $< $@

clean:
	rm -f lib/pkg_printf.c $(OBJS) $(TESTS) $(TESTS2) $(TESTS_SHELL) Kyuafile frontend/Kyuafile

Kyuafile: $(TESTS)
	@echo "Generating $@"
	@echo 'syntax(2)' > $@
	@echo 'test_suite("pkg")' >> $@
	@for p in $(TESTS); do \
		echo "atf_test_program{name='$$p'}" >> $@ ; \
	done
	@echo 'include("frontend/Kyuafile")' >> $@

Kyuafile2: $(TESTS2)
	@echo "Generating $@"
	@echo 'syntax(2)' > $@
	@echo 'test_suite("ravensw")' >> $@
	@for p in $(TESTS2); do \
		echo "atf_test_program{name='$$p'}" >> $@ ; \
	done

frontend/Kyuafile: $(TESTS_SHELL)
	@echo "Generating $@"
	@echo 'syntax(2)' > $@
	@echo 'test_suite("pkg")' >> $@
	@for p in $(TESTS_SHELL); do \
		echo "atf_test_program{name='$${p##*/}'}" >> $@ ; \
	done
